/*
 * -------------------------------------------------
 * Juno config
 * -------------------------------------------------
 * Pipeline parameters specific to running Tempo with LSF on the Juno cluster at MSKCC
 * -------------------------------------------------
 */

executor {
  name = "lsf"
  queueSize = 5000000000
  perJobMemLimit = true
}

params {

  // Limit resources so that this can run CI
  max_cpus   = 10
  max_memory = 40.GB
  max_time   = 240.h
  maxErrorRetry = 3
}

params.mem_per_core = true

process {
    withName: 'GENERATE_MEDICC_INPUT' {
        time = { 6.h + 6.h * (task.attempt - 1) }
        memory = 8.GB
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 3
        maxRetries = 3
    }
    withName: 'MEDICC:START_MEDICC_PARALLEL' {
        time = { 6.h + 6.h * (task.attempt - 1) }
        memory = 32.GB
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 3
        maxRetries = 3
    }
    withName: 'MEDICC:RUN_MEDICC_TASK' {
        time = { 6.h + 18.h * (task.attempt - 1) }
        memory = { 4.GB * task.attempt }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
    withName: 'MEDICC:FINISH_MEDICC_PARALLEL' {
        time = { 32.h + 48.h * (task.attempt - 1) }
        memory = { 64.GB * task.attempt }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
    withName: 'PLOT_MEDICC_RESULTS' {
        time = { 6.h + 6.h * (task.attempt - 1) }
        memory = 32.GB
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 3
        maxRetries = 3
    }

    withName: 'MEDICC_SITKA:CONVERT_SITKA_TREE' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:GENERATE_MEDICC_INPUT' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:RUN_MEDICC_WITH_TREE' {
        time = { 32.h + 48.h * (task.attempt - 1) }
        memory = { 64.GB * task.attempt }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
    withName: 'MEDICC_SITKA:PLOT_MEDICC_RESULTS' {
        time = 2.h
        memory = 32.GB
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 3
        maxRetries = 3
    }

    withName: 'MEDICC_SITKA:CONVERT_SITKA_TREE' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:GENERATE_MEDICC_INPUT' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:RUN_MEDICC_WITH_TREE' {
        time = { 32.h + 48.h * (task.attempt - 1) }
        memory = { 64.GB + 128.GB * (task.attempt - 1) }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
    withName: 'MEDICC_SITKA:PLOT_MEDICC_RESULTS' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }

    withName: 'MEDICC_SITKA:CONVERT_SITKA_TREE' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:GENERATE_MEDICC_INPUT' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:RUN_MEDICC_WITH_TREE' {
        time = { 32.h + 48.h * (task.attempt - 1) }
        memory = { 64.GB * task.attempt }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
    withName: 'MEDICC_SITKA:PLOT_MEDICC_RESULTS' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }

    withName: 'MEDICC_SITKA:CONVERT_SITKA_TREE' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:GENERATE_MEDICC_INPUT' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:RUN_MEDICC_WITH_TREE' {
        time = { 32.h + 48.h * (task.attempt - 1) }
        memory = { 64.GB * task.attempt }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
    withName: 'MEDICC_SITKA:PLOT_MEDICC_RESULTS' {
        time = 2.h
        memory = 32.GB
        cpus = 1
    }
    withName: 'MEDICC_SITKA:MEDICC:FINISH_MEDICC_PARALLEL' {
        time = { 32.h + 48.h * (task.attempt - 1) }
        memory = { 64.GB * task.attempt }
        cpus = 1
        errorStrategy = 'retry'
        maxErrors = 100
        maxRetries = 3
    }
}

